from .. import commands
from .. import drone_report

# Disable for bootcamp use
# pylint: disable-next=unused-import
from .. import drone_status
from .. import location
from ..private.decision import base_decision

class DecisionWaypointLandingPads(base_decision.BaseDecision):


    def __init__(self, waypoint: location.Location, acceptance_radius: float) -> None:
        """
        Initialize all persistent variables here with self.
        """
        self.waypoint = waypoint
        print(f"Waypoint: {waypoint}")

        self.acceptance_radius = acceptance_radius

        self.waypoint_x = waypoint.location_x
        self.waypoint_y = waypoint.location_y
        self.reached_waypoint = False

    def run(
        self, report: drone_report.DroneReport, landing_pad_locations: "list[location.Location]"
    ) -> commands.Command:
        command = commands.Command.create_null_command()

        drone_x_pos = report.position.location_x
        drone_y_pos = report.position.location_y

        def euclidean_dist(i: int) -> float:
            pad = landing_pad_locations[i]
            return (
                (pad.location_x - drone_x_pos) ** 2 + (pad.location_y - drone_y_pos) ** 2
            ) ** 0.5

        if not self.reached_waypoint:
            x_difference = self.waypoint_x - drone_x_pos
            y_difference = self.waypoint_y - drone_y_pos
            if (x_difference**2 + y_difference**2) ** 0.5 <= self.acceptance_radius:
                self.reached_waypoint = True
            else:
                command = commands.Command.create_set_relative_destination_command(
                    x_difference, y_difference
                )
        else:
            nearest_pad_index = 0
            nearest_distance = euclidean_dist(nearest_pad_index)

            for i in range(1, len(landing_pad_locations)):
                current_distance = euclidean_dist(i)
                if current_distance < nearest_distance:
                    nearest_pad_index = i
                    nearest_distance = current_distance

            nearest_pad = landing_pad_locations[nearest_pad_index]
            pad_x_diff = nearest_pad.location_x - drone_x_pos
            pad_y_diff = nearest_pad.location_y - drone_y_pos
            pad_distance = (pad_x_diff**2 + pad_y_diff**2) ** 0.5

            if pad_distance <= self.acceptance_radius:
                command = commands.Command.create_land_command()
            else:
                command = commands.Command.create_set_relative_destination_command(
                    pad_x_diff, pad_y_diff
                )

        return command
